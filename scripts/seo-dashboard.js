#!/usr/bin/env node

/**
 * SEO Monitoring Dashboard for Aurum Ascend Capital
 * Comprehensive SEO health check and monitoring system
 */

const fs = require('fs');
const path = require('path');
const { runSEOValidation } = require('./validate-structured-data');
const { runPerformanceCheck } = require('./performance-check');

const DASHBOARD_OUTPUT = path.join(__dirname, '..', 'seo-dashboard.html');

/**
 * Generate HTML dashboard with SEO metrics
 */
function generateDashboard(seoData, performanceData) {
  const timestamp = new Date().toISOString();
  
  const html = `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SEO Dashboard - Aurum Ascend Capital</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif; background: #f5f5f5; padding: 20px; }
        .header { background: linear-gradient(135deg, #1a365d, #2d3748); color: white; padding: 30px; border-radius: 12px; margin-bottom: 30px; text-align: center; }
        .header h1 { font-size: 2.5rem; margin-bottom: 10px; }
        .header p { opacity: 0.9; font-size: 1.1rem; }
        .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .card { background: white; border-radius: 12px; padding: 25px; box-shadow: 0 4px 6px rgba(0,0,0,0.1); border-left: 4px solid #4299e1; }
        .card h2 { color: #2d3748; margin-bottom: 15px; font-size: 1.3rem; }
        .metric { display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px; padding: 10px; background: #f7fafc; border-radius: 6px; }
        .metric-label { font-weight: 500; color: #4a5568; }
        .metric-value { font-weight: bold; }
        .status-good { color: #38a169; }
        .status-warning { color: #ed8936; }
        .status-error { color: #e53e3e; }
        .progress-bar { width: 100%; height: 8px; background: #e2e8f0; border-radius: 4px; overflow: hidden; margin-top: 5px; }
        .progress-fill { height: 100%; background: linear-gradient(90deg, #48bb78, #38a169); border-radius: 4px; transition: width 0.3s ease; }
        .alerts { background: white; border-radius: 12px; padding: 25px; margin-bottom: 30px; }
        .alert { padding: 15px; margin-bottom: 10px; border-radius: 8px; border-left: 4px solid; }
        .alert-critical { background: #fed7d7; border-color: #e53e3e; color: #742a2a; }
        .alert-warning { background: #feebc8; border-color: #ed8936; color: #7b341e; }
        .alert-info { background: #bee3f8; border-color: #4299e1; color: #2a4365; }
        .table { width: 100%; border-collapse: collapse; margin-top: 15px; }
        .table th, .table td { padding: 12px; text-align: left; border-bottom: 1px solid #e2e8f0; }
        .table th { background: #f7fafc; font-weight: 600; color: #4a5568; }
        .footer { text-align: center; color: #718096; font-size: 0.9rem; margin-top: 40px; }
        .timestamp { background: white; padding: 15px; border-radius: 8px; text-align: center; color: #4a5568; margin-bottom: 20px; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ Aurum Ascend Capital</h1>
        <p>SEO Performance Dashboard</p>
    </div>
    
    <div class="timestamp">
        <strong>Last Updated:</strong> ${new Date(timestamp).toLocaleString()}
    </div>
    
    ${generateOverviewSection(seoData, performanceData)}
    ${generatePerformanceSection(performanceData)}
    ${generateSEOSection(seoData)}
    ${generateAlertsSection(seoData, performanceData)}
    ${generateRecommendationsSection(seoData, performanceData)}
    
    <div class="footer">
        <p>Generated by Aurum Ascend SEO Monitoring System | ${timestamp}</p>
    </div>
</body>
</html>`;
  
  return html;
}

function generateOverviewSection(seoData, performanceData) {
  const avgPerformance = performanceData?.mobile?.length ? 
    performanceData.mobile.reduce((sum, r) => sum + (r.scores?.performance || 0), 0) / performanceData.mobile.length : 0;
  
  const validStructuredData = seoData?.structuredData?.filter(r => r.status === 'valid').length || 0;
  const totalStructuredData = seoData?.structuredData?.length || 0;
  
  return `
    <div class="grid">
        <div class="card">
            <h2>üìä Overall Health Score</h2>
            <div class="metric">
                <span class="metric-label">Performance Score</span>
                <span class="metric-value ${avgPerformance >= 90 ? 'status-good' : avgPerformance >= 70 ? 'status-warning' : 'status-error'}">${avgPerformance.toFixed(1)}/100</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${avgPerformance}%"></div>
            </div>
        </div>
        
        <div class="card">
            <h2>üèóÔ∏è Structured Data</h2>
            <div class="metric">
                <span class="metric-label">Valid Pages</span>
                <span class="metric-value ${validStructuredData === totalStructuredData ? 'status-good' : 'status-warning'}">${validStructuredData}/${totalStructuredData}</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: ${totalStructuredData ? (validStructuredData / totalStructuredData) * 100 : 0}%"></div>
            </div>
        </div>
        
        <div class="card">
            <h2>ü§ñ Robots & Sitemap</h2>
            <div class="metric">
                <span class="metric-label">Robots.txt</span>
                <span class="metric-value ${seoData?.robots?.status === 200 ? 'status-good' : 'status-error'}">${seoData?.robots?.status === 200 ? 'Valid' : 'Error'}</span>
            </div>
            <div class="metric">
                <span class="metric-label">Sitemap.xml</span>
                <span class="metric-value ${seoData?.sitemap?.status === 200 ? 'status-good' : 'status-error'}">${seoData?.sitemap?.status === 200 ? 'Valid' : 'Error'}</span>
            </div>
        </div>
    </div>`;
}

function generatePerformanceSection(performanceData) {
  if (!performanceData?.mobile?.length) return '';
  
  const tableRows = performanceData.mobile.map(result => {
    if (!result.scores) return '';
    
    return `
        <tr>
            <td>${result.pageName || result.url}</td>
            <td class="${result.scores.performance >= 90 ? 'status-good' : result.scores.performance >= 70 ? 'status-warning' : 'status-error'}">${result.scores.performance}/100</td>
            <td class="${result.scores.seo >= 90 ? 'status-good' : result.scores.seo >= 70 ? 'status-warning' : 'status-error'}">${result.scores.seo}/100</td>
            <td class="${result.coreWebVitals.lcp.rating === 'good' ? 'status-good' : result.coreWebVitals.lcp.rating === 'needs-improvement' ? 'status-warning' : 'status-error'}">${result.coreWebVitals.lcp.displayValue}</td>
            <td class="${result.coreWebVitals.cls.rating === 'good' ? 'status-good' : result.coreWebVitals.cls.rating === 'needs-improvement' ? 'status-warning' : 'status-error'}">${result.coreWebVitals.cls.displayValue}</td>
        </tr>`;
  }).join('');
  
  return `
    <div class="card" style="grid-column: 1 / -1;">
        <h2>üöÄ Performance Metrics (Mobile)</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Page</th>
                    <th>Performance</th>
                    <th>SEO</th>
                    <th>LCP</th>
                    <th>CLS</th>
                </tr>
            </thead>
            <tbody>
                ${tableRows}
            </tbody>
        </table>
    </div>`;
}

function generateSEOSection(seoData) {
  if (!seoData?.structuredData?.length) return '';
  
  const tableRows = seoData.structuredData.map(result => `
    <tr>
        <td>${result.url}</td>
        <td class="${result.status === 'valid' ? 'status-good' : 'status-error'}">${result.status}</td>
        <td>${new Date(result.timestamp).toLocaleTimeString()}</td>
    </tr>`).join('');
  
  return `
    <div class="card" style="grid-column: 1 / -1;">
        <h2>üèóÔ∏è Structured Data Validation</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>URL</th>
                    <th>Status</th>
                    <th>Last Checked</th>
                </tr>
            </thead>
            <tbody>
                ${tableRows}
            </tbody>
        </table>
    </div>`;
}

function generateAlertsSection(seoData, performanceData) {
  const alerts = [];
  
  // Performance alerts
  if (performanceData?.alerts?.length) {
    alerts.push(...performanceData.alerts);
  }
  
  // SEO alerts
  if (seoData?.robots?.status !== 200) {
    alerts.push({
      type: 'critical',
      message: 'Robots.txt is not accessible',
      page: 'robots.txt'
    });
  }
  
  if (seoData?.sitemap?.status !== 200) {
    alerts.push({
      type: 'critical',
      message: 'Sitemap.xml is not accessible',
      page: 'sitemap.xml'
    });
  }
  
  if (!alerts.length) {
    return `
    <div class="alerts">
        <h2>üéâ No Issues Found</h2>
        <div class="alert alert-info">
            <strong>Great job!</strong> All SEO and performance checks are passing.
        </div>
    </div>`;
  }
  
  const alertItems = alerts.map(alert => `
    <div class="alert alert-${alert.type}">
        <strong>${alert.page || 'General'}:</strong> ${alert.message}
        ${alert.issues ? alert.issues.map(issue => `<br>‚Ä¢ ${issue}`).join('') : ''}
    </div>`).join('');
  
  return `
    <div class="alerts">
        <h2>üö® Alerts & Issues</h2>
        ${alertItems}
    </div>`;
}

function generateRecommendationsSection(seoData, performanceData) {
  const recommendations = [];
  
  // Performance recommendations
  if (performanceData?.mobile?.length) {
    performanceData.mobile.forEach(result => {
      if (result.opportunities?.length) {
        result.opportunities.slice(0, 3).forEach(opp => {
          recommendations.push(`üöÄ ${result.pageName}: ${opp.title}`);
        });
      }
    });
  }
  
  // SEO recommendations
  const validStructuredData = seoData?.structuredData?.filter(r => r.status === 'valid').length || 0;
  const totalStructuredData = seoData?.structuredData?.length || 0;
  
  if (validStructuredData < totalStructuredData) {
    recommendations.push('üèóÔ∏è Fix structured data validation errors on remaining pages');
  }
  
  if (seoData?.sitemap?.urlCount < 10) {
    recommendations.push('üó∫Ô∏è Consider adding more pages to your sitemap for better coverage');
  }
  
  if (!recommendations.length) {
    recommendations.push('‚úÖ No specific recommendations at this time. Keep monitoring!');
  }
  
  const recItems = recommendations.map(rec => `<li>${rec}</li>`).join('');
  
  return `
    <div class="card" style="grid-column: 1 / -1;">
        <h2>üí° Recommendations</h2>
        <ul style="margin-left: 20px; line-height: 1.6;">
            ${recItems}
        </ul>
    </div>`;
}

/**
 * Main dashboard generation function
 */
async function generateSEODashboard() {
  console.log('üìä Generating SEO Dashboard...\n');
  
  try {
    // Run SEO validation
    console.log('üîç Running SEO validation...');
    const seoValidation = require('./validate-structured-data');
    await seoValidation.runSEOValidation();
    
    // Read SEO results
    const seoReportPath = path.join(__dirname, '..', 'seo-validation-report.json');
    const seoData = fs.existsSync(seoReportPath) ? JSON.parse(fs.readFileSync(seoReportPath, 'utf8')) : {};
    
    // Run performance check
    console.log('üöÄ Running performance check...');
    const performanceCheck = require('./performance-check');
    await performanceCheck.runPerformanceCheck();
    
    // Read performance results
    const perfReportPath = path.join(__dirname, '..', 'performance-report.json');
    const performanceData = fs.existsSync(perfReportPath) ? JSON.parse(fs.readFileSync(perfReportPath, 'utf8')) : {};
    
    // Generate dashboard HTML
    const dashboardHTML = generateDashboard(seoData, performanceData);
    fs.writeFileSync(DASHBOARD_OUTPUT, dashboardHTML);
    
    console.log(`\n‚úÖ SEO Dashboard generated successfully!`);
    console.log(`üìÅ Dashboard saved to: ${DASHBOARD_OUTPUT}`);
    console.log(`üåê Open in browser: file://${DASHBOARD_OUTPUT}`);
    
  } catch (error) {
    console.error('‚ùå Error generating dashboard:', error.message);
    process.exit(1);
  }
}

// Run dashboard generation
if (require.main === module) {
  generateSEODashboard().catch(console.error);
}

module.exports = {
  generateSEODashboard,
  generateDashboard
};
